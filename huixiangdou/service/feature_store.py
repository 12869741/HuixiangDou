# Copyright (c) OpenMMLab. All rights reserved.
"""extract feature and search with user query."""
import argparse
import json
import os
import re
import shutil
from multiprocessing import Process
from pathlib import Path

import pytoml
from BCEmbedding.tools.langchain import BCERerank
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import (MarkdownHeaderTextSplitter,
                                     MarkdownTextSplitter,
                                     RecursiveCharacterTextSplitter)
from langchain.vectorstores.faiss import FAISS as Vectorstore
from langchain_core.documents import Document
from loguru import logger
from torch.cuda import empty_cache

from .file_operation import FileOperation
from .helper import multimodal
from .retriever import CacheRetriever, Retriever


def multimodal_images_async(file_dir, images: list, suffix):
    for filepath in images:
        try:
            text = multimodal(filepath=filepath)
            if text is not None:
                # image.jpg to image.jpg.text
                write_filename = '{}{}'.format(os.path.basename(filepath),
                                               suffix)
                logger.info(
                    ('multimodal_images_async', file_dir, write_filename))
                with open(os.path.join(file_dir, write_filename), 'w') as f:
                    f.write(text)
        except Exception as e:
            logger.error(str(e))
            # multimodal fail, quit without retry
            break


class FeatureStore:
    """Tokenize and extract features from the project's documents, for use in
    the reject pipeline and response pipeline."""

    def __init__(self,
                 embeddings: HuggingFaceEmbeddings,
                 reranker: BCERerank,
                 config_path: str = 'config.ini',
                 language: str = 'zh') -> None:
        """Init with model device type and config."""
        self.config_path = config_path
        self.reject_throttle = -1
        self.language = language
        with open(config_path, encoding='utf8') as f:
            config = pytoml.load(f)['feature_store']
            self.reject_throttle = config['reject_throttle']

        logger.warning(
            '!!! If your feature generated by `text2vec-large-chinese` before 20240208, please rerun `python3 -m huixiangdou.service.feature_store`'  # noqa E501
        )

        logger.debug('loading text2vec model..')
        self.embeddings = embeddings
        self.reranker = reranker
        self.compression_retriever = None
        self.rejecter = None
        self.retriever = None
        self.md_splitter = MarkdownTextSplitter(chunk_size=768,
                                                chunk_overlap=32)
        self.text_splitter = RecursiveCharacterTextSplitter(chunk_size=768,
                                                            chunk_overlap=32)

        self.head_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=[
            ('#', 'Header 1'),
            ('##', 'Header 2'),
            ('###', 'Header 3'),
        ])
        self.enable_multimodal = False

    def split_md(self, text: str, source: None):
        """Split the markdown document in a nested way, first extracting the
        header.

        If the extraction result exceeds 1024, split it again according to
        length.
        """
        docs = self.head_splitter.split_text(text)

        final = []
        for doc in docs:
            header = ''
            if len(doc.metadata) > 0:
                if 'Header 1' in doc.metadata:
                    header += doc.metadata['Header 1']
                if 'Header 2' in doc.metadata:
                    header += ' '
                    header += doc.metadata['Header 2']
                if 'Header 3' in doc.metadata:
                    header += ' '
                    header += doc.metadata['Header 3']

            if len(doc.page_content) >= 1024:
                subdocs = self.md_splitter.create_documents([doc.page_content])
                for subdoc in subdocs:
                    if len(subdoc.page_content) >= 10:
                        final.append('{} {}'.format(
                            header, subdoc.page_content.lower()))
            elif len(doc.page_content) >= 10:
                final.append('{} {}'.format(
                    header, doc.page_content.lower()))  # noqa E501

        for item in final:
            if len(item) >= 1024:
                logger.debug('source {} split length {}'.format(
                    source, len(item)))
        return final

    def clean_md(self, text: str):
        """Remove parts of the markdown document that do not contain the key
        question words, such as code blocks, URL links, etc."""
        # remove ref
        pattern_ref = r'\[(.*?)\]\(.*?\)'
        new_text = re.sub(pattern_ref, r'\1', text)

        # remove code block
        pattern_code = r'```.*?```'
        new_text = re.sub(pattern_code, '', new_text, flags=re.DOTALL)

        # remove underline
        new_text = re.sub('_{5,}', '', new_text)

        # remove table
        # new_text = re.sub('\|.*?\|\n\| *\:.*\: *\|.*\n(\|.*\|.*\n)*', '', new_text, flags=re.DOTALL)   # noqa E501

        # use lower
        new_text = new_text.lower()
        return new_text

    def get_md_documents(self, filepath):
        documents = []
        length = 0
        text = ''
        with open(filepath, encoding='utf8') as f:
            text = f.read()
        text = os.path.basename(filepath) + '\n' + self.clean_md(text)
        if len(text) <= 1:
            return [], length

        chunks = self.split_md(text=text, source=os.path.abspath(filepath))
        for chunk in chunks:
            new_doc = Document(page_content=chunk,
                               metadata={'source': os.path.abspath(filepath)})
            length += len(chunk)
            documents.append(new_doc)
        return documents, length

    def get_text_documents(self, text: str, filepath: str):
        if len(text) <= 1:
            return []
        chunks = self.text_splitter.create_documents([text])
        documents = []
        for chunk in chunks:
            chunk.metadata = {'source': filepath}
            documents.append(chunk)
        return documents

    def ingress_response(self, file_dir: str, work_dir: str):
        """Extract the features required for the response pipeline based on the
        document."""
        feature_dir = os.path.join(work_dir, 'db_response')
        if not os.path.exists(feature_dir):
            os.makedirs(feature_dir)

        files = [str(x) for x in list(Path(file_dir).glob('*'))]
        # logger.info('glob {} in dir {}'.format(files, file_dir))
        file_opr = FileOperation()
        documents = []
        state_map = {}

        for i, file in enumerate(files):
            basename = os.path.basename(file)
            if basename.endswith('.text'):
                basename = '.text'.join(basename.split('.text')[0:-1])

            logger.debug('{}/{}.. {}'.format(i + 1, len(files), basename))
            file_type = file_opr.get_type(file)

            if file_type == 'md':
                md_documents, md_length = self.get_md_documents(file)
                documents += md_documents
                state_map[basename] = {'status': True, 'desc': md_length}
            else:
                text, error = file_opr.read(file)
                if error is not None:
                    state_map[basename] = {
                        'status': False,
                        'desc': 'read fail'
                    }
                    continue
                state_map[basename] = {'status': True, 'desc': str(len(text))}
                logger.info('{} content length {}'.format(file, len(text)))
                text = basename + text
                documents += self.get_text_documents(text, file)

        vs = Vectorstore.from_documents(documents, self.embeddings)
        vs.save_local(feature_dir)
        return state_map

    def ingress_reject(self, file_dir: str, work_dir: str):
        """Extract the features required for the reject pipeline based on
        documents."""
        feature_dir = os.path.join(work_dir, 'db_reject')
        if not os.path.exists(feature_dir):
            os.makedirs(feature_dir)

        files = [str(x) for x in list(Path(file_dir).glob('*'))]
        documents = []
        file_opr = FileOperation()

        for i, file in enumerate(files):
            logger.debug('{}/{}..'.format(i + 1, len(files)))
            basename = os.path.basename(file)

            file_type = file_opr.get_type(file)
            if file_type == 'md':
                # reject base not clean md
                text = basename + '\n'
                with open(file, encoding='utf8') as f:
                    text += f.read()
                if len(text) <= 1:
                    continue

                chunks = self.split_md(text=text, source=os.path.abspath(file))
                for chunk in chunks:
                    new_doc = Document(
                        page_content=chunk,
                        metadata={'source': os.path.abspath(file)})
                    documents.append(new_doc)

            else:
                text, error = file_opr.read(file)
                if error is not None:
                    continue
                text = basename + text
                documents += self.get_text_documents(text, file)

        vs = Vectorstore.from_documents(documents, self.embeddings)
        vs.save_local(feature_dir)

    def preprocess(self, filepaths: list, work_dir: str):
        """Preprocesses markdown files in a given directory excluding those
        containing 'mdb'. Copies each file to 'preprocess' with new name formed
        by joining all subdirectories with '_'.

        Args:
            filepaths (list): Directory where the original markdown files reside.
            work_dir (str): Working directory where preprocessed files will be stored.  # noqa E501

        Returns:
            str: Path to the directory where preprocessed markdown files are saved.

        Raises:
            Exception: Raise an exception if no markdown files are found in the provided repository directory.  # noqa E501
        """
        file_dir = os.path.join(work_dir, 'preprocess')
        if os.path.exists(file_dir):
            logger.warning(
                f'{file_dir} already exists, remove and regenerate.')
            shutil.rmtree(file_dir)
        os.makedirs(file_dir)

        success_cnt = 0
        fail_cnt = 0
        skip_cnt = 0

        file_opr = FileOperation()
        images = []
        normals = []
        multimodal_process = None
        state_map = {}

        for filepath in filepaths:
            _type = file_opr.get_type(filepath)
            if _type == 'image':
                if self.enable_multimodal:
                    images.append(filepath)
                else:
                    basename = os.path.basename(filepath)
                    state_map[basename] = {'status': False, 'desc': 'skip'}
                    skip_cnt += 1
            elif _type in ['pdf', 'md', 'text', 'word', 'excel']:
                normals.append(filepath)
            else:
                skip_cnt += 1

        # process images
        if len(images) > 0:
            # start a process to call multimodal for images
            multimodal_process = Process(target=multimodal_images_async,
                                         args=(file_dir, images, '.text'))
            multimodal_process.start()

        # process normal file (pdf, text)
        for filepath in normals:
            basename = os.path.basename(filepath)
            try:
                shutil.copy(filepath, os.path.join(file_dir, basename))
                success_cnt += 1
            except Exception as e:
                fail_cnt += 1
                logger.error(str(e))
                state_map[basename] = {'status': False, 'desc': 'IO error'}

        if len(images) > 0:
            multimodal_process.join()
            # check ocr result
            for filepath in images:
                basename = os.path.basename(filepath)
                converted = os.path.join(file_dir, basename + '.text')
                if os.path.exists(converted):
                    success_cnt += 1
                else:
                    state_map[basename] = {'status': False, 'desc': 'skip'}
                    skip_cnt += 1

        logger.debug(
            f'preprocess input {len(filepaths)} files, {success_cnt} success, {fail_cnt} fail, {skip_cnt} skip. '
        )
        return file_dir, (success_cnt, fail_cnt, skip_cnt), state_map

    def initialize(self, filepaths: list, work_dir: str):
        """Initializes response and reject feature store.

        Only needs to be called once. Also calculates the optimal threshold
        based on provided good and bad question examples, and saves it in the
        configuration file.
        """
        logger.info(
            'initialize response and reject feature store, you only need call this once.'  # noqa E501
        )
        file_dir, counter, proc_state = self.preprocess(filepaths=filepaths,
                                                        work_dir=work_dir)
        success_cnt, _, __ = counter
        ingress_state = {}

        if success_cnt > 0:
            ingress_state = self.ingress_response(file_dir=file_dir,
                                                  work_dir=work_dir)
            self.ingress_reject(file_dir=file_dir, work_dir=work_dir)

        state_map = {**proc_state, **ingress_state}
        if len(state_map) != len(filepaths):
            for filepath in filepaths:
                basename = os.path.basename(filepath)
                if basename not in state_map:
                    logger.warning(f'{filepath} no state')
                    state_map[basename] = {
                        'status': False,
                        'desc': 'internal error'
                    }
        return counter, state_map


def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description='Feature store for processing directories.')
    parser.add_argument('--work_dir',
                        type=str,
                        default='workdir',
                        help='Working directory.')
    parser.add_argument(
        '--repo_dir',
        type=str,
        default='repodir',
        help='Root directory where the repositories are located.')
    parser.add_argument(
        '--config_path',
        default='config.ini',
        help='Feature store configuration path. Default value is config.ini')
    parser.add_argument(
        '--good_questions',
        default='resource/good_questions.json',
        help=  # noqa E251
        'Positive examples in the dataset. Default value is resource/good_questions.json'  # noqa E501
    )
    parser.add_argument(
        '--bad_questions',
        default='resource/bad_questions.json',
        help=  # noqa E251
        'Negative examples json path. Default value is resource/bad_questions.json'  # noqa E501
    )
    parser.add_argument(
        '--sample', help='Input an json file, save reject and search output.')
    args = parser.parse_args()
    return args


def test_reject(retriever: Retriever, sample: str = None):
    """Simple test reject pipeline."""
    if sample is None:
        real_questions = [
            'SAM 10个T 的训练集，怎么比比较公平呢~？速度上还有缺陷吧？',
            '想问下，如果只是推理的话，amp的fp16是不会省显存么，我看parameter仍然是float32，开和不开推理的显存占用都是一样的。能不能直接用把数据和model都 .half() 代替呢，相比之下amp好在哪里',  # noqa E501
            'mmdeploy支持ncnn vulkan部署么，我只找到了ncnn cpu 版本',
            '大佬们，如果我想在高空检测安全帽，我应该用 mmdetection 还是 mmrotate',
            '请问 ncnn 全称是什么',
            '有啥中文的 text to speech 模型吗?',
            '今天中午吃什么？',
            'huixiangdou 是什么？',
            'mmpose 如何安装？',
            '使用科研仪器需要注意什么？'
        ]
    else:
        with open(sample) as f:
            real_questions = json.load(f)

    for example in real_questions:
        reject, _ = retriever.is_reject(example)

        if reject:
            logger.error(f'reject query: {example}')
        else:
            logger.warning(f'process query: {example}')

        if sample is not None:
            if reject:
                with open('workdir/negative.txt', 'a+') as f:
                    f.write(example)
                    f.write('\n')
            else:
                with open('workdir/positive.txt', 'a+') as f:
                    f.write(example)
                    f.write('\n')

    empty_cache()


def test_query(retriever: Retriever, sample: str = None):
    """Simple test response pipeline."""
    if sample is not None:
        with open(sample) as f:
            real_questions = json.load(f)
        logger.add('logs/feature_store_query.log', rotation='4MB')
    else:
        real_questions = ['mmpose installation']

    for example in real_questions:
        example = example[0:400]
        print(retriever.query(example))
        empty_cache()

    empty_cache()


if __name__ == '__main__':
    args = parse_args()
    cache = CacheRetriever(config_path=args.config_path)
    fs_init = FeatureStore(embeddings=cache.embeddings,
                           reranker=cache.reranker,
                           config_path=args.config_path)

    # walk all files in repo dir
    file_opr = FileOperation()
    filepaths = file_opr.scan_dir(repo_dir=args.repo_dir)
    counter, state_map = fs_init.initialize(filepaths=filepaths,
                                            work_dir=args.work_dir)
    logger.info(f'success, fail, skip: {counter}')
    for k, v in state_map.items():
        logger.info('{} {}'.format(k, v['desc']))
    del fs_init

    # update reject throttle
    retriever = cache.get(config_path=args.config_path, work_dir=args.work_dir)
    with open(os.path.join('resource', 'good_questions.json')) as f:
        good_questions = json.load(f)
    with open(os.path.join('resource', 'bad_questions.json')) as f:
        bad_questions = json.load(f)
    retriever.update_throttle(config_path=args.config_path,
                              good_questions=good_questions,
                              bad_questions=bad_questions)

    cache.pop('default')

    # test
    retriever = cache.get(config_path=args.config_path, work_dir=args.work_dir)
    test_reject(retriever, args.sample)
    test_query(retriever, args.sample)
